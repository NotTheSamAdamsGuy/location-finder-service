import { nanoid } from "nanoid";

import * as locationDao from "../daos/location_dao.ts";
import {
  Location,
  NearbyLocationsParams,
  AddLocationParams,
  ServiceReply,
} from "../types.ts";
import { logger } from "../logging/logger.ts";

/**
 * @typedef LocationServiceReply
 * @property {boolean} success - Whether or not the action was successful.
 * @property {string} message - An optional message returned from the action.
 * @property {Location | Location[] | undefined} result - The data generated by the service.
 */
export type LocationServiceReply = ServiceReply & {
  result?: Location | Location[] | string | undefined | null;
};

/**
 * Get the location's data based on the provided ID value.
 * @param {string} locationId - a location's ID string
 * @returns {Promise<LocationServiceReply>} - a Promise, resolving to a LocationServiceReply object.
 */
export const getLocation = async (
  locationId: string
): Promise<LocationServiceReply> => {
  try {
    const location = await locationDao.findById(locationId);
    return { success: true, result: location };
  } catch (err: any) {
    throw new Error("Unable to fetch location data.", err);
  }
};

/**
 * Get data for all locations in the database.
 * @returns {Promise<LocationServiceReply>} - a Promise, resolving to a LocationServiceReply object
 */
export const getAllLocations = async (): Promise<LocationServiceReply> => {
  try {
    const locations = await locationDao.findAll();
    return { success: true, result: locations };
  } catch (err: any) {
    throw new Error("Unable to fetch locations data.", err);
  }
};

/**
 * Get locations nearby the given coordinates.
 *
 * @param {NearbyLocationsParams} - data for the location search
 * @returns {Promise<LocationServiceReply>} - a Promise, resolving to a LocationServiceReply object
 */
export const getNearbyLocations = async (
  params: NearbyLocationsParams
): Promise<LocationServiceReply> => {
  const { latitude, longitude, radius, unitOfDistance, sort } = params;

  try {
    const data = await locationDao.findNearbyByGeoRadius(
      latitude,
      longitude,
      radius,
      unitOfDistance,
      sort
    );
    return { success: true, result: data };
  } catch (err: any) {
    throw new Error("Unable to fetch nearby locations", err);
  }
};

/**
 * Add a new Location into the database.
 * @param {AddLocationParams} params - data for the location
 * @returns {Promise<LocationServiceResult>} a Promise, resolving to a LocationServiceResult object.
 */
export const addLocation = async (
  params: AddLocationParams
): Promise<LocationServiceReply> => {
  const {
    name,
    streetAddress,
    city,
    state,
    zip,
    coordinates,
    description,
    images,
    tags,
    displayOnSite,
  } = params;

  const location: Location = {
    id: nanoid(),
    name: name,
    streetAddress: streetAddress,
    city: city,
    state: state,
    zip: zip,
    coordinates: coordinates,
    description: description,
    images: images,
    tags: tags,
    displayOnSite: displayOnSite,
  };

  try {
    const locationKey = await locationDao.insert(location);
    return { success: true, result: locationKey };
  } catch (err: any) {
    logger.error(err);
    throw new Error("Unable to save location data", err);
  }
};

export const removeLocation = async (
  locationId: string
): Promise<LocationServiceReply> => {
  try {
    const isDeleted = await locationDao.remove(locationId);
    return { success: isDeleted, result: undefined };
  } catch (err: any) {
    logger.error(err);
    throw new Error("Unable to delete location data", err);
  }
};
